# -*- coding: utf-8 -*-
"""uber_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18GG4jVcY5fcJiVGRTEpBebwoWZo8LNJ1
"""



import pandas

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from math import radians, cos, sin, asin, sqrt
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('uber.csv')

df.head()

dataset.isnull().sum()

dataset.shape

df.drop(['Unnamed: 0', 'key'], axis=1, inplace=True)
df.dropna(inplace=True)
df = df[(df['fare_amount'] > 0) & (df['fare_amount'] < 300)]
df = df[(df['passenger_count'] > 0) & (df['passenger_count'] <= 6)]

df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'], errors='coerce')
df = df.dropna(subset=['pickup_datetime'])
df['hour'] = df['pickup_datetime'].dt.hour
df['day'] = df['pickup_datetime'].dt.day
df['month'] = df['pickup_datetime'].dt.month
df['year'] = df['pickup_datetime'].dt.year
df['day_of_week'] = df['pickup_datetime'].dt.dayofweek

def                                                                                                                                            (lat1, lon1, lat2, lon2):
    R = 6371  # Radius of Earth in km
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    return R * c


df['distance_km'] = df.apply(lambda row: haversine(row['pickup_latitude'], row['pickup_longitude'],
                                                   row['dropoff_latitude'], row['dropoff_longitude']), axis=1)
df = df[(df['distance_km'] > 0) & (df['distance_km'] < 100)]

#

corr = df[['fare_amount', 'passenger_count', 'hour', 'distance_km']].corr()
sns.heatmap(corr, annot=True)
plt.show()

features = ['passenger_count', 'hour', 'day', 'month', 'year', 'day_of_week', 'distance_km']
X = df[features]
y = df['fare_amount']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

def haversine(lat1, lon1, lat2, lon2):
    R = 6371  # Earth radius in kilometers
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])  # Convert degrees to radians
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    return R * c  # Distance in kilometers

df['distance_km'] = df.apply(lambda row: haversine(row['pickup_latitude'], row['pickup_longitude'],                                                   row['dropoff_latitude'], row['dropoff_longitude']), axis=1)
df = df[(df['distance_km'] > 0) & (df['distance_km'] < 100)]  # Remove zero or very long trips

def evaluate_model(name, y_true, y_pred):
    print(f"{name} Results:")
    print("R2 Score:", r2_score(y_true, y_pred))
    print("RMSE:", np.sqrt(mean_squared_error(y_true, y_pred)))
    print()

evaluate_model("Linear Regression", y_test, y_pred_lr)
evaluate_model("Random Forest", y_test, y_pred_rf)

